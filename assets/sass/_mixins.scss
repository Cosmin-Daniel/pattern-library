@function get-px-from-rem($size_in_rem) {
  @return $size_in_rem * $font-size-base-in-px;
}

@function get-rem-from-px($size_in_px) {
  @return $size_in_px / $font-size-base-in-px;
}

@mixin font-size($size_in_px) {
  font-size: #{$size_in_px}px;
  font-size: #{get-rem-from-px($size_in_px)}rem;
}

@mixin padding($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    padding-#{$dimension}: #{$size_in_px}px;
    padding-#{$dimension}: #{get-rem-from-px($size_in_px)}rem;
  }
  @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();
    @each $size in $size_in_px {
      $parts-px: append($parts-px, #{$size}px, "space")
    }
    @each $size in $size_in_px {
      $parts-rem: append($parts-rem, #{get-rem-from-px($size)}rem, "space")
    }
    padding: $parts-px;
    padding: $parts-rem;
  }
  @else {
    padding: #{$size_in_px}px;
    padding: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin margin($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    margin-#{$dimension}: #{$size_in_px}px;
    margin-#{$dimension}: #{get-rem-from-px($size_in_px)}rem;
  }
  @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();
    @each $size in $size_in_px {
      $parts-px: append($parts-px, #{$size}px, "space")
    }
    @each $size in $size_in_px {
      $parts-rem: append($parts-rem, #{get-rem-from-px($size)}rem, "space")
    }
    margin: $parts-px;
    margin: $parts-rem;
  }
  @else {
    margin: #{$size_in_px}px;
    margin: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin height($size_in_px) {
  height: #{$size_in_px}px;
  height: #{get-rem-from-px($size_in_px)}rem;
}

@mixin width($size_in_px) {
  width: #{$size_in_px}px;
  width: #{get-rem-from-px($size_in_px)}rem;
}

@mixin visuallyhidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin unhidden() {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: auto;
  position: static;
  width: auto;
}

@mixin article-with-background() {
  background-color: $color-primary;
  color: $color-text--reverse;
  @include padding(12, "bottom");

  .meta {
    color: $color-text--reverse;
  }

  .meta:after {
    border-bottom-width: 0;
    padding-top: 0;
  }

  .meta__type {
    color: $color-text--reverse;
  }

  .meta__type:hover,
  .meta__type:active {
    color: $color-primary-dark;
  }

  .content-header__subject_link {
    color: $color-text--reverse;
  }

  .content-header__strapline {
    color: $color-text--reverse;
  }
}
